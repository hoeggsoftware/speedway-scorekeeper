<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:racer-api="http://www.mulesoft.org/schema/mule/racer-api" xmlns:compression="http://www.mulesoft.org/schema/mule/compression" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/compression http://www.mulesoft.org/schema/mule/compression/current/mule-compression.xsd
http://www.mulesoft.org/schema/mule/racer-api http://www.mulesoft.org/schema/mule/racer-api/current/mule-racer-api.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd">
	<flow name="score1brc" doc:id="3e5005c5-80c7-4a3e-b37f-b5dd535fc739" >
		<set-variable value="#[payload.endpoint]" doc:name="endpoint" doc:id="0cd5dd69-1a38-4662-a6de-f5c612782919" variableName="endpoint"/>
		<set-variable value="#[payload.racerId]" doc:name="racerId" doc:id="77cb6863-41c0-42f8-8ea9-d79852e8d98c" variableName="racerId"/>
		<set-variable value="#[uuid()]" doc:name="raceId" doc:id="f32dc870-dc95-4adb-b0c9-23d68fc576a0" variableName="raceId"/>
		<set-variable value="#[payload.count]" doc:name="count" doc:id="b2a8623e-75fd-49ce-84bc-03b7a9cc7ab6" variableName="count"/>
		<flow-ref doc:name="prepare1brcData" doc:id="10b8d45c-271f-45ec-af21-5c6118467e6c" name="prepare1brcData" />
		<logger level="DEBUG" doc:name="DEBUG" doc:id="bfbaf2da-86ba-4cee-9f57-868eb273e2bc" message='Timing racer #[vars.racerId]' category="1brc.timer"/>
		<set-variable value="#[now()]" doc:name="officialStart" doc:id="c586b7c2-7d01-4fbf-9176-aeb17fef9c37" variableName="officialStart" />
		<http:request method="POST" doc:name="endpoint POST /1brc" doc:id="595b5aff-46cf-4fd6-9ed1-077f9b12ce18" url='#["$(vars.endpoint)/1brc"]' requestStreamingMode="ALWAYS" target="racerResponse" responseTimeout="${racer.timeout}"/>
		<logger level="DEBUG" doc:name="DEBUG" doc:id="eed36b48-b16d-4dd6-aaaf-ba30e6847b81" message='Got response from racer #[vars.racerId]' category="1brc.timer"/>
		<set-variable value='#[((now() - vars.officialStart) as Number {unit: "nanos"}) / 1000000000]' doc:name="officialTime" doc:id="3a1b8e09-c13e-4332-a681-f2c0d2104d1c" variableName="officialTime" />
		<validation:is-true doc:name="check racer ID" doc:id="177ea176-dfe7-448c-a1b8-aab3309b3502" expression="#[vars.racerResponse.racerId == vars.racerId]" message="incorrect racer ID in Average Temperatures response" >
			<error-mapping sourceType="VALIDATION:INVALID_BOOLEAN" targetType="APP:BADRACER" />
		</validation:is-true>
		<flow-ref doc:name="verify1brcRacerAverages" doc:id="d8f12ad1-2ae6-4f95-acf5-471920a8236f" name="verify1brcRacerAverages"/>
		<ee:transform doc:name="response" doc:id="518bf752-4df7-414b-9e1a-d11dbd93a9e9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	raceId: vars.raceId,
	racerId: vars.racerId,
	time: vars.officialTime
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="generate1brc" doc:id="b0b0e9b4-ca73-46b9-97ff-f92eb7f1b1f1" initialState="stopped">
		<scheduler doc:name="Scheduler" doc:id="b8336026-9d12-42e3-86dd-685c3fb5898b">
			<scheduling-strategy>
				<fixed-frequency frequency="225" timeUnit="MINUTES" />
			</scheduling-strategy>
		</scheduler>
		<logger level="INFO" doc:name="INFO" doc:id="2206495d-a780-4008-878d-69ae94b1530d" message="Beginning data generation run" category="1brc.generate"/>
		<set-variable value='#[now() as String { format: "yyyy-MM-dd HHmmss"}]' doc:name="timestamp" doc:id="599698dd-664d-4e07-847b-5ae90ad884f1" variableName="timestamp"/>
		<ee:transform doc:name="generate" doc:id="e41fd6f0-9399-4874-8fe2-5f4a1ceb67ad">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::app::Generator
output application/csv deferred=true

---
randomTemperatures(1000000000)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<compression:compress doc:name="gzip" doc:id="519e3378-8e0b-4409-91d8-f55758947804">
			<ee:repeatable-file-store-stream inMemorySize="4" bufferUnit="MB" />
			<compression:compressor>
				<compression:gzip-compressor />
			</compression:compressor>
		</compression:compress>
		<file:write doc:name="stations-{timestamp}.csv.gz" doc:id="26c4c0fe-5804-4190-b7a8-e432640bd5d1" path='#["/Users/rhoegg/src/anypointspeedway/tmp/stations-$(vars.timestamp).csv.gz"]' />
		<logger level="INFO" doc:name="INFO" doc:id="c08836a9-04e5-41a9-9c7a-2a558d876ef8" category="1brc.generate" message='#["Completed 1brc data generation, started $(vars.timestamp)"]'/>
	</flow>
	<flow name="computeAverages1brc" doc:id="7a72666b-8943-4909-a2ce-05dc6bc302d3" initialState="stopped">
		<scheduler doc:name="Scheduler" doc:id="9f7e5c6d-1f0b-4392-bb4a-2ba43bd9bd76" >
			<scheduling-strategy >
				<fixed-frequency frequency="225" timeUnit="MINUTES"/>
			</scheduling-strategy>
		</scheduler>
		<s3:list-objects doc:name="List Objects" doc:id="0e8d088b-bcd5-4e9a-9187-f6d6f6754fa5" config-ref="speedwayS3Config" bucketName="speedway-internal" prefix="scorekeeper/1brc/1Mstations"/>
		<foreach doc:name="For Each" doc:id="6702e4dd-210f-47dd-828f-a040a1fec072" >
			<set-variable value="#[payload.key]" doc:name="filename" doc:id="6ce7f7fc-deeb-437f-95c7-6d686d85db73" variableName="filename"/>
			<logger level="INFO" doc:name="INFO" doc:id="7b3d6b9f-6cfa-4cfb-aa5b-595434d1b89f" message='#["averages for $(vars.filename)"]' category="1brc.compute"/>
			<s3:get-object doc:name="Get Object" doc:id="bab8b038-d138-4e02-8af8-6fe9245ded3a" config-ref="speedwayS3Config" bucketName="speedway-internal" key="#[payload.key]"/>
			<compression:decompress doc:name="Decompress" doc:id="d18cab1d-2f8d-41e3-907c-aa3fb68a74e2" outputMimeType="application/csv; streaming=true">
				<compression:decompressor >
					<compression:gzip-decompressor />
				</compression:decompressor>
			</compression:decompress>
			<ee:transform doc:name="averages" doc:id="28635b9a-5341-47a7-8bbd-cbf7f031dbbc" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/csv deferred=true

var grouped = payload groupBy $.station
	pluck (measurements, station) -> 
		{ station: station, temperature: avg(measurements map $.temp) }
---
grouped orderBy $.station map {
	station: $.station,
	temperature: $.temperature as String { format: "#.00000" } as Number
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<compression:compress doc:name="Compress" doc:id="d501eb59-c81d-4d22-b3d6-cec7e46aa156" >
				<compression:compressor >
					<compression:gzip-compressor />
				</compression:compressor>
			</compression:compress>
			<set-variable value='#[output application/java&#10;import * from dw::core::Strings&#10;&#10;var prefix = vars.filename substringBefore "-" default ""&#10;var suffix = vars.filename substringAfter prefix default ""&#10;--- &#10;"averages" ++ suffix]' doc:name="averagesFilename" doc:id="f6e450d4-4ad6-498a-a004-4ce0fb43cdd6" variableName="averagesFilename"/>
			<logger level="INFO" doc:name="INFO" doc:id="57ff14c4-1a21-42e3-9ba6-afa929ef84dc" category="1brc.compute" message='#["uploading averages $(vars.averagesFilename)"]'/>
			<file:write doc:name="Write" doc:id="27f2bcc2-7f3d-4357-aed8-932c712e6cf8" path='#["/Users/rhoegg/src/anypointspeedway/tmp/$(vars.averagesFilename)"]'/>
			<file:read doc:name="Read" doc:id="d561c7a9-d2dd-4e5c-8929-0a3e22ae0dc0" path='#["/Users/rhoegg/src/anypointspeedway/tmp/$(vars.averagesFilename)"]'/>
			<s3:put-object doc:name="Put Object" doc:id="c44f39ae-9023-434e-a871-18076a48007e" config-ref="speedwayS3Config" bucketName="speedway-internal" key='#["scorekeeper/1brc/$(vars.averagesFilename)"]' contentLength="#[attributes.size]"/>
		</foreach>
	</flow>
	<sub-flow name="prepare1brcData" doc:id="d51af147-4bcd-482a-920a-c7ca75b18563">
		<choice doc:name="Choice" doc:id="690e050c-8ae7-4cd1-a866-e5d8d5229266">
			<when expression="#[vars.count &gt; 10000]">
				<flow-ref doc:name="fetchRandomStationData" doc:id="f24b2a03-08d8-4b62-8a51-c609ef81530e" name="fetchRandomStationData" />
				<flow-ref doc:name="fudgeTemperatures" doc:id="a7be3e36-ee11-4088-a7be-2ea61145b232" name="fudgeTemperatures" />
				<flow-ref doc:name="fetchCachedAverages" doc:id="18e50ccd-ea29-4062-be54-e4c5f818a13d" name="fetchCachedAverages" target="averages"/>
			</when>
			<otherwise>
				<logger level="DEBUG" doc:name="DEBUG" doc:id="2828afdd-6526-4056-862f-2eea74e968df" message='Preparing random input of #[vars.count] samples' category="1brc.prepare"/>
				<ee:transform doc:name="randomTemperatures" doc:id="91c6ec2d-60b6-4d95-8501-764ca7b5c37b">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::app::Generator
---
randomTemperatures(vars.count)]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;&#10;var grouped = payload groupBy $.station&#10;	pluck (measurements, station) -&gt; &#10;		{ station: station, temperature: avg(measurements map $.temperature) }&#10;---&#10;grouped orderBy $.station map {&#10;	station: $.station,&#10;	temperature: $.temperature as String { format: "#.00000" } as Number&#10;}]' doc:name="averages" doc:id="5d79d891-faea-4bd2-8055-0a20caa3245e" variableName="averages" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="fetchRandomStationData" doc:id="d1f6ca8e-6aaf-4035-b2ac-b759dadcf86a" >
		<choice doc:name="Choice" doc:id="c565d5fe-08d3-4465-b04b-9afdf7eee6b2" >
			<when expression="#[payload.count == 1000000]">
				<set-variable value="1Mstations" doc:name="prefix" doc:id="08f7bad3-37a9-431a-839e-c692e1dbc104" variableName="prefix"/>
				<s3:list-objects doc:name="1brc data files" doc:id="7b224c01-fa0d-4cc2-8cc0-c6a39dfbd166" config-ref="speedwayS3Config" bucketName="speedway-internal" prefix='#["scorekeeper/1brc/$(vars.prefix)"]' />
				<set-variable value="#[%dw 2.0&#10;output application/java&#10;---&#10;payload[randomInt(sizeOf(payload))].key as String]" doc:name="cachedStationObjectKey" doc:id="e9bc06bf-d929-4f82-aedc-c5df549ee491" variableName="cachedStationObjectKey" />
			</when>
			<when expression="#[payload.count == 1000000000]">
				<set-variable value="stations" doc:name="prefix" doc:id="5f14eef1-8987-4e2f-99a0-e95e27e89ed6" variableName="prefix"/>
				<set-variable value="scorekeeper/1brc/stations-2024-02-10 222443.csv.gz" doc:name="cachedStationObjectKey" doc:id="cae5c1c1-93ad-4718-bf7b-89385996892e" variableName="cachedStationObjectKey"/>
			</when>
			<otherwise >
				<raise-error doc:name="BAD_REQUEST" doc:id="cb8e00d5-c38b-47e1-958b-9789b6f49abd" type="APP:BAD_REQUEST" description='#["Unsupported temperature count $(payload.count)"]'/>
			</otherwise>
		</choice>
		<logger level="DEBUG" doc:name="DEBUG" doc:id="3c3202b9-d212-4d54-bd7f-cd241b40f633" message='#["Fetching $(vars.cachedStationObjectKey)"]' category="1brc.fetch"/>
		<s3:get-object doc:name="stations data" doc:id="ef36261f-89c8-44dd-ba1a-97a4a07b7ab8" config-ref="speedwayS3Config" bucketName="speedway-internal" key="#[vars.cachedStationObjectKey]"/>
		<compression:decompress doc:name="Decompress CSV" doc:id="1e6facd0-b1eb-4b8e-9998-8f1b1c3c63cc" outputMimeType="application/csv; streaming=true">
			<compression:decompressor >
				<compression:gzip-decompressor />
			</compression:decompressor>
		</compression:decompress>
		<ee:transform doc:name="to JSON" doc:id="d95ab33a-89d5-4745-bc5a-684e78982ede" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="fetchCachedAverages" doc:id="4225ab7f-12f0-47cd-96cc-c3954881d62d" >
		<set-variable value='#[%dw 2.0&#10;import * from dw::core::Strings&#10;var objectKey = (vars.cachedStationObjectKey splitBy "/")[-1] as String&#10;// example 1Mstations-2024-02-12 132041.csv.gz&#10;---&#10;"averages-" ++ (objectKey substringAfter "-")]' doc:name="cachedAveragesObjectKey" doc:id="8f43e986-39a7-4ee0-955a-93f9a844a815" variableName="cachedAveragesObjectKey"/>
		<logger level="DEBUG" doc:name="DEBUG" doc:id="4a1fa344-9a96-48d3-937d-db729d9f7735" message='#["fetching cached averages $(vars.cachedAveragesObjectKey)"]' category="1brc.averages"/>
		<s3:get-object doc:name="averages" doc:id="37a284dd-3553-4874-aa9c-d476d6ee27fd" config-ref="speedwayS3Config" bucketName="speedway-internal" key='#["scorekeeper/1brc/$(vars.cachedAveragesObjectKey)"]'/>
		<compression:decompress doc:name="Decompress CSV" doc:id="ae789403-53eb-4322-a55e-f37f56ea2697" outputMimeType="application/csv; streaming=true">
			<compression:decompressor >
				<compression:gzip-decompressor />
			</compression:decompressor>
		</compression:decompress>
		<ee:transform doc:name="averages JSON" doc:id="8634def3-0877-4557-a17c-3d0f445d052b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
---
payload map (row) -> {
	station: row.station,
	temperature: row.temperature as Number + vars.epsilon 
		as String { format: "#.00000" } as Number
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="fudgeTemperatures" doc:id="ac55a50e-eebf-4d79-b327-d02acb7a1e7f" >
		<set-variable value="#[random() * 2 - 1]" doc:name="epsilon" doc:id="86b0995d-5040-457e-b063-d276ff184e02" variableName="epsilon"/>
		<ee:transform doc:name="adjust values" doc:id="da85c3ce-46d1-4f1a-9f82-79de58bf7bc9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
---
payload map {
	station: $.station,
	temperature: $.temp + vars.epsilon
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="verify1brcRacerAverages" doc:id="d9e11adc-77fb-4d92-8267-be55746596d6" >
		<set-variable value="#[vars.racerResponse.averages]" doc:name="racerAverages" doc:id="109923a9-0e9f-4bca-a72d-770f79909d6c" variableName="racerAverages"/>
		<set-variable value="#[import * from dw::app::Verification&#10;---&#10;vars.averages default [] checkRacer vars.racerAverages]" doc:name="find incorrectValues" doc:id="84fcffb1-9b32-4ea3-9d4e-4ffb9fc2a9f7" variableName="incorrectValues"/>
		<logger level="DEBUG" doc:name="DEBUG" doc:id="ac6b72ed-280c-48a6-9fa2-d9f5b2b56761" message="#[vars.incorrectValues]" category="1brc.verify"/>
		<try doc:name="Try" doc:id="b33ef69a-dd7e-406d-ba9d-2a504cded19f" >
			<validation:is-empty-collection doc:name="incorrectValues" doc:id="8f704062-0ee1-47bd-a806-4519aaffca17" values="#[vars.incorrectValues]" message='#["Failed 1brc validation with $(sizeOf(vars.incorrectValues)) incorrect"]'>
			<error-mapping sourceType="VALIDATION:NOT_EMPTY_COLLECTION" targetType="APP:INVALID_RACE_RESULT" />
		</validation:is-empty-collection>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="false" doc:name="On Error Propagate" doc:id="ec4cd433-8a07-4d9f-af85-7a3915dc828c" type="APP:INVALID_RACE_RESULT">
					<logger level="WARN" doc:name="WARN" doc:id="f2218e88-9469-412e-ba23-4e12653ac12b" category="1brc.verify" message="Racer returned incorrect values, example: #[output application/json --- vars.incorrectValues[0]]"/>
				</on-error-propagate>
			</error-handler>
		</try>
	</sub-flow>
</mule>
