<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:racer-api="http://www.mulesoft.org/schema/mule/racer-api"
	xmlns:compression="http://www.mulesoft.org/schema/mule/compression" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/compression http://www.mulesoft.org/schema/mule/compression/current/mule-compression.xsd
http://www.mulesoft.org/schema/mule/racer-api http://www.mulesoft.org/schema/mule/racer-api/current/mule-racer-api.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<flow name="score1brc" doc:id="3e5005c5-80c7-4a3e-b37f-b5dd535fc739" >
		<set-variable value="#[payload.endpoint]" doc:name="endpoint" doc:id="0cd5dd69-1a38-4662-a6de-f5c612782919" variableName="endpoint"/>
		<set-variable value="#[payload.racerId]" doc:name="racerId" doc:id="77cb6863-41c0-42f8-8ea9-d79852e8d98c" variableName="racerId"/>
		<set-variable value="#[uuid()]" doc:name="raceId" doc:id="f32dc870-dc95-4adb-b0c9-23d68fc576a0" variableName="raceId"/>
		<set-variable value="#[payload.count]" doc:name="count" doc:id="b2a8623e-75fd-49ce-84bc-03b7a9cc7ab6" variableName="count"/>
		<flow-ref doc:name="prepare1brcData" doc:id="10b8d45c-271f-45ec-af21-5c6118467e6c" name="prepare1brcData" />
		<set-variable value="#[now()]" doc:name="officialStart" doc:id="c586b7c2-7d01-4fbf-9176-aeb17fef9c37" variableName="officialStart" />
		<http:request method="POST" doc:name="endpoint POST /1brc" doc:id="595b5aff-46cf-4fd6-9ed1-077f9b12ce18" url='#["$(vars.endpoint)/1brc"]' requestStreamingMode="ALWAYS" target="racerResponse"/>
		<set-variable value='#[((now() - vars.officialStart) as Number {unit: "nanos"}) / 1000000000]' doc:name="officialTime" doc:id="3a1b8e09-c13e-4332-a681-f2c0d2104d1c" variableName="officialTime" />
		<validation:is-true doc:name="check racer ID" doc:id="177ea176-dfe7-448c-a1b8-aab3309b3502" expression="#[vars.racerResponse.racerId == vars.racerId]" message="incorrect racer ID in Average Temperatures response" >
			<error-mapping sourceType="VALIDATION:INVALID_BOOLEAN" targetType="APP:BADRACER" />
		</validation:is-true>
		<flow-ref doc:name="verify1brcRacerAverages" doc:id="d8f12ad1-2ae6-4f95-acf5-471920a8236f" name="verify1brcRacerAverages"/>
		<ee:transform doc:name="response" doc:id="518bf752-4df7-414b-9e1a-d11dbd93a9e9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	raceId: vars.raceId,
	racerId: vars.racerId,
	time: vars.officialTime
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="generate1brc" doc:id="b0b0e9b4-ca73-46b9-97ff-f92eb7f1b1f1" initialState="stopped">
		<scheduler doc:name="Scheduler" doc:id="b8336026-9d12-42e3-86dd-685c3fb5898b">
			<scheduling-strategy>
				<fixed-frequency frequency="225" timeUnit="MINUTES" />
			</scheduling-strategy>
		</scheduler>
		<logger level="INFO" doc:name="INFO" doc:id="2206495d-a780-4008-878d-69ae94b1530d" message="Beginning data generation run" category="1brc.generate"/>
		<set-variable value='#[now() as String { format: "yyyy-MM-dd HHmmss"}]' doc:name="timestamp" doc:id="599698dd-664d-4e07-847b-5ae90ad884f1" variableName="timestamp"/>
		<ee:transform doc:name="generate" doc:id="e41fd6f0-9399-4874-8fe2-5f4a1ceb67ad">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::app::Generator
output application/csv deferred=true

---
randomTemperatures(1000000000)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<compression:compress doc:name="gzip" doc:id="519e3378-8e0b-4409-91d8-f55758947804">
			<ee:repeatable-file-store-stream inMemorySize="4" bufferUnit="MB" />
			<compression:compressor>
				<compression:gzip-compressor />
			</compression:compressor>
		</compression:compress>
		<file:write doc:name="stations-{timestamp}.csv.gz" doc:id="26c4c0fe-5804-4190-b7a8-e432640bd5d1" path='#["/Users/rhoegg/src/anypointspeedway/tmp/stations-$(vars.timestamp).csv.gz"]' />
		<logger level="INFO" doc:name="INFO" doc:id="c08836a9-04e5-41a9-9c7a-2a558d876ef8" category="1brc.generate" message='#["Completed 1brc data generation, started $(vars.timestamp)"]'/>
	</flow>
	<sub-flow name="prepare1brcData" doc:id="d51af147-4bcd-482a-920a-c7ca75b18563">
		<choice doc:name="Choice" doc:id="690e050c-8ae7-4cd1-a866-e5d8d5229266">
			<when expression="#[vars.count &gt; 10000]">
				<flow-ref doc:name="fetchRandomStationData" doc:id="f24b2a03-08d8-4b62-8a51-c609ef81530e" name="fetchRandomStationData" />
				<flow-ref doc:name="fudgeTemperatures" doc:id="a7be3e36-ee11-4088-a7be-2ea61145b232" name="fudgeTemperatures" />
			</when>
			<otherwise>
				<ee:transform doc:name="randomTemperatures" doc:id="91c6ec2d-60b6-4d95-8501-764ca7b5c37b">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::app::Generator
---
randomTemperatures(vars.count)]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;&#10;var grouped = payload groupBy $.station&#10;	pluck (measurements, station) -&gt; &#10;		{ station: station, temperature: avg(measurements map $.temperature) }&#10;---&#10;grouped orderBy $.station map {&#10;	station: $.station,&#10;	temperature: $.temperature as String { format: "#.00000" } as Number&#10;}]' doc:name="averages" doc:id="5d79d891-faea-4bd2-8055-0a20caa3245e" variableName="averages"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="fetchRandomStationData" doc:id="d1f6ca8e-6aaf-4035-b2ac-b759dadcf86a" >
		<logger level="INFO" doc:name="Logger" doc:id="f04e5a28-f79c-41a2-b5f3-856dad0eea44" />
	</sub-flow>
	<sub-flow name="fudgeTemperatures" doc:id="ac55a50e-eebf-4d79-b327-d02acb7a1e7f" >
		<logger level="INFO" doc:name="Logger" doc:id="a6a95f81-fe83-456a-b7e5-f252dc6c247a" category="fdsfds"/>
	</sub-flow>
	<sub-flow name="verify1brcRacerAverages" doc:id="d9e11adc-77fb-4d92-8267-be55746596d6" >
		<set-variable value="#[import * from dw::app::Verification&#10;---&#10;vars.averages default [] checkRacer vars.racerResponse.averages]" doc:name="find incorrectValues" doc:id="84fcffb1-9b32-4ea3-9d4e-4ffb9fc2a9f7" variableName="incorrectValues"/>
		<logger level="DEBUG" doc:name="DEBUG" doc:id="ac6b72ed-280c-48a6-9fa2-d9f5b2b56761" message="#[vars.incorrectValues]" category="1brc.verify"/>
		<validation:is-empty-collection doc:name="incorrectValues" doc:id="8f704062-0ee1-47bd-a806-4519aaffca17" values="#[vars.incorrectValues]" message='#["Failed 1brc validation with $(sizeOf(vars.incorrectValues)) incorrect"]'>
			<error-mapping sourceType="VALIDATION:NOT_EMPTY_COLLECTION" targetType="APP:INVALID_RACE_RESULT" />
		</validation:is-empty-collection>
	</sub-flow>
</mule>
